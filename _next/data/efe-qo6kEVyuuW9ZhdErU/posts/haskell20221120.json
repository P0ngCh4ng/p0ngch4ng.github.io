{"pageProps":{"postData":{"id":"haskell20221120","contentHtml":"<h2>暗黙の取出</h2>\n<p>下のmain関数が動くようにshowDice関数を作成</p>\n<pre><code>import System.Random\n\ndice :: IO Int\ndice = randomRIO (1, 6)\n\nshowDice = do\n   ret &#x3C;- dice\n   print ret\n   return ret\n\nmain = do\n   showDice\n   showDice\n   print =&#x3C;&#x3C; showDice\n   ```\n 暗黙の取出とは、doの中にアクションを置く事で自動的に値を取り出してくれることである。\n   \n showDice関数の中では、変数retにdiceを束縛。ここでretはアクションとして扱われる。\n 次のprintでは、retから値を取り出す。ここで値は棄却されるが、print関数の副作用として、標準出力にoutputされる。\n 最後のreturn関数で、アクションを返す。\n \n ## Applicativeスタイルの適用\n</code></pre>\n<p>fib 0 = return 0\nfib 1 = return 1\nfib n | n > 1 = do\na &#x3C;- fib (n - 2)\nb &#x3C;- fib (n - 1)\nreturn $ a + b\n```\n上のfib関数から&#x3C;-を消す</p>\n<pre><code>```\nfib 0 = return 0\n</code></pre>\n<p>fib 1 = return 1\nfib n | n > 1 =   (+) &#x3C;$> fib (n - 2) &#x3C;*> fib (n - 1)\n```</p>\n<pre><code>&#x3C;$>関数は一つ引数としてアクションを取る。そして左の関数へアクションから値をとりだし戻値をアクションに閉じ込める\n&#x3C;*>関数は今回の問題では、単に引数をもう一つとるだけの演算子だ。\n</code></pre>\n","title":"haskell練習4","date":"2022-11-20","tag":"programming"}},"__N_SSG":true}