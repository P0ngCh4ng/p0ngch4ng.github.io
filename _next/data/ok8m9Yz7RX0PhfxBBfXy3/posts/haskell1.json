{"pageProps":{"postData":{"id":"haskell1","contentHtml":"<h2>モナドをわかるためのキーワード</h2>\n<h3>状態</h3>\n<p>値は状態に包まれている可能性がある。\nここでいう状態とは、例えば\nMaybe であれば\n(値がある or 値がない)\nList であれば\n[１番目の値, ２番目の値, ... ,N 番目の値]\nなどであり、これら状態に包まれている場合、通常の計算を適用することはできない。\nそこで登場するのが Functor!\nFunctor は状態に包まれた値に関数を適用させることができる。\n（Functor がどのように適用させるかは他の説明に譲ることとする。）</p>\n<h2>モナドができることを具体的に言ってみる</h2>\n<p>Maybe モナドを例に取り、モナドができることを具体的に言ってみる。</p>\n<p>モナドは失敗することがありえる値を扱うことができる。\n値を Maybe モナドで包む時、値は Just x or Nothing の二つの状態を取りうる。\nこの時、モナドを引数に取る関数は、失敗する恐れのある計算を行なっていると捉えることができる。</p>\n<p>ここで失敗する恐れのある計算を一つ考えてみる。\ndiv2 :: Int -> Maybe Int\ndiv2 x = if even x then Just (x <code>div</code> 2)\nelse Nothing (ウォークスルー Haskell より引用)</p>\n<p>この関数は、値を計算し、Maybe モナドで包んでいる。</p>\n<p>このようにモナドで包むことによって、値は状態を保つことができる。</p>\n<p>今日はここまで！</p>\n","title":"もなどちょっとアウトプット","date":"2022-9-4","tag":"programming"}},"__N_SSG":true}