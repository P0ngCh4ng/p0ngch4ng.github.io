{"pageProps":{"postData":{"id":"((Pythonで) 書く (Lisp) インタプリタ)","contentHtml":"<p>http://www.aoky.net/articles/peter_norvig/lispy.htm より\n記事のまとめ...というより写経。</p>\n<h2>schemeについて</h2>\n<p>schemeは一般的にはlispの方言という説明を見かけたが、実態は違う言語である。\nここでlispの方言というのは、内包的な意味ではなく、単純に似た言語であるという意味にちかい。</p>\n<p>今回の記事では、webページを読んで気づいたこと、写経などを行う。短い記事であるため、早ければ1ページ長くても２ページで終わる予定。\n最終的には記事だけ残る。</p>\n<h2>インタプリタの作成について</h2>\n<pre><code>インタプリタは以下のような構成で作成される。\n- 字句解析\n- 構文解析\n</code></pre>\n<ul>\n<li>\n<p>構文実行\n上の二つについてはまとめて論じらることもしばしばあるようだが、大まかにはこれらの大分がされる。</p>\n<p>字句解析はインタプリタによって大きな違いはなく、与えられた文章を、字句ごとに分けることが目的である。\n構文解析とは、字句解析の段階で最小になった文章の意味づけを理解していくフェーズである。</p>\n<p>ここで、最小に分解された文字を、<strong>トークン</strong>と呼ぶ。\n処理されたトークンは、構文解析のフェーズで解読され、最後に構文実行のフェーズで実行される。\nインタプリタの言語ごとの差異は、ここで大きくなる。</p>\n<p>基本的には、組み込み関数と文、それから式が実行される。</p>\n</li>\n</ul>\n<h2>インタプリタを作成する</h2>\n<h3>構文解析: readとparse</h3>\n<pre><code>元の記事では、字句解析と構文解析が一緒くたになっているが、これは字句解析の実装が非常に簡単であったからであると思う。\nというのも、字句解析においてはPythonのstr.splitをそのまま使っている。\n\n```\ndef tokenize(s):\n\"文字列をトークンのリストに変換する。\"\nreturn s.replace('(',' ( ').replace(')',' ) ').split()\n```\nリスト１ 字句解析のプログラム\n\n*()が多いため一見不思議な文に見えるが、()の間に空白を挟んでいるだけである。*\n\n```\ndef read_from(tokens):\n\"トークンの列から式を読み込む。\"\n\tif len(tokens) == 0:\n\t\traise SyntaxError('unexpected EOF while reading')\n\ttoken = tokens.pop(0)\n\tif '(' == token:\n\t\tL = []\n\t\twhile tokens[0] != ')':\n\t\t\tL.append(read_from(tokens))\n\t\ttokens.pop(0) # pop off ')'\n\t\treturn L\n\telif ')' == token:\n\t\traise SyntaxError('unexpected )')\n\telse:\n\t\treturn atom(token)\n\ndef atom(token):\n\"数は数にし、それ以外のトークンはシンボルにする。\"\n\ttry: return int(token)\n\texcept ValueError:\n\t\ttry: return float(token)\n\t\texcept ValueError:\n\t\t\treturn Symbol(token)\n```\nリスト2 構文解析のプログラム\n\nread_from関数は、字句解析されたトークンが入力される。\n\nlispでは、特別な構文は()しかなく、プログラム全体は必ず()に包まれる。\nそれら以外はすべてシンボルか数値である。\n()の中を再帰的に処理し、トークンはそれぞれatom関数でシンボルか数値かどうか判定される。\nシンボルはSymbolというオブジェクトに変換されるが、これはstrのエイリアスでしかなく、実態は後述するenvのなかに辞書の形で格納されている。\nつまりここでSymbolオブジェクトは単なるキーとなる文字列である。\n\n非常に簡素だが、Schemeの構文解析はこのように実装することができる。\n</code></pre>\n<h3>実行: eval</h3>\n<pre><code>def eval(x, env=global_env):\n    \"環境の中で式を評価する。\"\n    if isa(x, Symbol):             # 変数参照\n        return env.find(x)[x]\n    elif not isa(x, list):         # 定数リテラル\n        return x                \n    elif x[0] == 'quote':          # (quote exp)\n        (_, exp) = x\n        return exp\n    elif x[0] == 'if':             # (if test conseq alt)\n        (_, test, conseq, alt) = x\n        return eval((conseq if eval(test, env) else alt), env)\n    elif x[0] == 'set!':           # (set! var exp)\n        (_, var, exp) = x\n        env.find(var)[var] = eval(exp, env)\n    elif x[0] == 'define':         # (define var exp)\n        (_, var, exp) = x\n        env[var] = eval(exp, env)\n\t\telif x[0] == 'lambda':         # (lambda (var*) exp)\n        (_, vars, exp) = x\n        return lambda *args: eval(exp, Env(vars, args, env))\n    elif x[0] == 'begin':          # (begin exp*)\n        for exp in x[1:]:\n            val = eval(exp, env)\n        return val\n    else:                          # (proc exp*)\n        exps = [eval(exp, env) for exp in x]\n        proc = exps.pop(0)\n        return proc(*exps)\n \nisa = isinstance\n \nSymbol = str\n</code></pre>\n<p>リスト3 構文実行のプログラム</p>\n<p>構文解析によって処理されたプログラムは、ここで解釈される。\nすでにトークンから変数へと処理されているため、関数であれば関数が呼び出され、\n変数はenvから呼び出される。\nまた、要素が一つでない場合は再帰的に処理される。</p>\n<pre><code>それぞれの関数の意味は元記事にリストがあるため説明は割愛する。\n\nここで、envについて説明を行う。\n\n```\nclass Env(dict):\n\"環境: ペア{'var':val}のdictで、外部環境(outer)を持つ。\"\ndef __init__(self, parms=(), args=(), outer=None):\n    self.update(zip(parms,args))\n    self.outer = outer\ndef find(self, var):\n    \"var が現れる一番内側のEnvを見つける。\"\n    return self if var in self else self.outer.find(var)\n```\n\nenvクラスは、Pythonの辞書を使って定義されたクラスで、辞書のメソッドはそのまま用いることができる。\n\n\nここで辞書を使わずにクラスを定義しているのは理由がある。\n\n環境は通常クロージャごとに状態が変わるため、今の環境に値がない場合は、一つ外側の環境にアクセスする必要がある。\nfindメソッドはそのために定義されたものである。\n</code></pre>\n","title":"((Pythonで) 書く (Lisp) インタプリタ)　を読んで","date":"2022-11-15","tag":"progamming"}},"__N_SSG":true}