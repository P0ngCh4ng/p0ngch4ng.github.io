{"pageProps":{"postData":{"id":"schemepractice","contentHtml":"<p>かなりやっつけではあるが、http://www.nct9.ne.jp/m_hiroi/func/scheme.html\nを参照しつつ練習問題に挑戦したため、記録として残しておく。</p>\n<pre><code>\n; 引数を三乗する cubic\n(define (cubic x) (* x x x))\n(cubic 3)\n; 引数を 1/2 にする half\n(define (half x)(* x 1/2))\n(half 4)\n;二つの引数の平均値をとる medium\n(define (medium x y) (* (+ x y) 1/2))\n(medium 2 4)\n;二つの引数の二乗の平均値をとる square-medium\n(define (square-medium x y) (* (+ (* x x)(* y y) ) 1/2))\n(square-medium 2 4)\n;1 から n までの総和を求める関数 sum n\n(define (sum n) (* n (+ n 1) 1/2))\n(sum 3)\n;公式 1 + 2 + ... + n = n(n + 1)/2 を使うと簡単\n#|\ncons と list で次に示すリストを作ってください\nxs : (a (b) ((c)) (((d))))\nys : ((a b c) (d e f) (g h i))\nzs : ((a . b) (c . d) (e . f))\n|#\n(define xs (list 'a (list 'b ) (list (list 'c)) (list (list ( list 'd)))))\nxs\n(define ys (list (list 'a 'b 'c) (list 'd 'e 'f) (list 'g 'h 'i)))\nys\n(define zs (list (cons 'a 'b) (cons 'c 'd) (cons 'e 'f)))\nzs\n\n\n(list-ref  (list-ref xs 1) 0)\n(list-ref (list-ref  (list-ref xs 2) 0) 0)\n(list-ref (list-ref (list-ref  (list-ref xs 3) 0) 0) 0)\n\n(list-ref (list-ref ys 0) 0)\n(list-ref (list-ref ys 0) 1)\n(list-ref (list-ref ys 0) 2)\n\n(list-ref (list-ref ys 1) 0)\n(list-ref (list-ref ys 1) 1)\n(list-ref (list-ref ys 1) 2)\n\n(list-ref (list-ref ys 2) 0)\n(list-ref (list-ref ys 2) 1)\n(list-ref (list-ref ys 2) 2)\n\n(list-ref (list-ref zs 0) 0)\n(list-ref (list-ref zs 0) 0)\n\n(define (select-drink degree)\n  (if (&#x3C;= 30 degree)\n      (display \"Drink ice coffee\\n\")\n      (display \"Don't drink ice coffee\\n\")))\n\n#|\n引数 n が引数 m の約数か判定する述語 divisor? m n\n引数 n が 3 または 5 の倍数か判定する述語 three-or-five-multiple n\n引数 n が引数 low, high の範囲内にあるか判定する述語 between n low high\nリストの要素がただひとつか調べる述語 single? xs\nリストの要素が二つあるか調べる述語 double?\n|#\n(define (divisor? m n)\n  (zero? (modulo m n))\n  )\n(divisor? 4 2)\n(define (three-or-five-multiple n) (or (divisor? n 3) (divisor? n 5))\n  )\n(three-or-five-multiple 4)\n\n(define (between n low high)(and (&#x3C;= low n) (>= high n)))\n(between 1 0 3)\n\n(define (single? xs)\n  (and (pair? xs) (null? (cdr xs))))\n(single? '(1 2))\n\n\n(define (double? xs)\n  (and (pair? xs)(single? (cdr xs))))\n(double? '())\n\n\n(define (pow2 x y)\n  (if (= y 0)\n      1\n      (let ((z (pow2 x (quotient y 2))))\n        (if (= (modulo y 2) 0)\n            (* z z)\n            (* x z z)))))\n\n\n(define (pow1 x y)\n  (cond\n    ((= y 0) 1)\n    ((= (modulo y 2) 0)\n     (* (pow1 x (quotient y 2)) (pow1 x (quotient y 2))))\n    (else                               \n     (* x (pow1 x (quotient y 2)) (pow1 x (quotient y 2))))))\n(define (facti n a)\n  (if (= n 0)\n      a\n      (facti (- n 1) (* n a))))\n(define (fact n) (facti n 1))\n\n\n\n\n;; リスト xs の長さを求める関数 my-length xs\n;; length は Scheme に定義されている\n;; リスト xs はリスト ys よりも長いか調べる述語 longer? xs ys\n;; リスト xs の先頭から n 個の要素を取り出す関数 take xs n\n;; リスト xs の先頭から n 個の要素を取り除く関数 drop xs n\n;; take, drop は Scheme のライブラリ SRFI-1 [*3] の関数\n;; SRFI-1 は R7RS-large で取り込まれる予定\n;; リストの要素を足し算する関数 sum-list xs\n;; リストの要素を掛け算する関数 product xs\n\n\n(define (my-length xs)\n  (let ((xs2 xs)\n        (n 0))\n        (while (not (null? xs2))\n          (set! xs2 (cdr xs2))\n          (set! n (+ n 1)))\n    n)\n  )\n\n(my-length '(1 2 3))\n(define (my-length2 xs) \n  (let iter ((xs xs) (c 0))\n    (if (null? xs) c (iter (cdr xs) (+ c 1)))))\n\n(my-length2 '(1 2 3))\n(define (longer? xs ys)  \n  (\n   cond ((null? xs) #f)((null? ys) #t)( else (longer? (cdr xs)(cdr ys)))\n   ))\n\n(longer? '(1  3 3 3 2) '(1 2 3))\n\n(define (take xs n)\n  (let iter ((xs xs) (n n)(ls '()))\n    (if (zero? n) ls\n        (iter (cdr xs) (- n 1) (cons (car xs) ls)))))\n\n(take '(2 2 2) 10)\n(define (drop xs n)\n  (if (zero? n) xs (drop (cdr xs) (- n 1))))\n(drop '(2 3 2 3 4 5) 10)\n\n(define (sum-list xs)\n  (let iter ((xs xs)(n 0))\n    (if(null? xs) n (iter (cdr xs) (+ n (car xs))))))\n(sum-list '(1 2 10))\n(define (product xs)\n  (let iter((xs xs)(n 1))\n    (if(null? xs) n (iter(cdr xs) (* n (car xs)))))\n  )\n(product '(1 2 3 4 5 6 7 8 9 10))\n</code></pre>\n","title":"scheme練習1","date":"2022-12-13"}},"__N_SSG":true}