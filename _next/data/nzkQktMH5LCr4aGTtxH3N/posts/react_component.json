{"pageProps":{"postData":{"id":"react_component","contentHtml":"<p>これはとりあえず書いてみた関数コンポーネント</p>\n<pre><code>export const App: FC&#x3C;myProps> = () => {\n  const [value, setValue] = useState(\"\");\n\n  const handleChange = (event: any) => {\n    setValue(event.target.value);\n  };\n\n  const handleSubmit = async function (\n    event: React.FormEvent&#x3C;HTMLFormElement>\n  ) {\n    event.preventDefault();\n  };\n\n  return (\n    &#x3C;div className=\"container\">\n      &#x3C;a>{value} &#x3C;/a>\n      &#x3C;form onSubmit={handleSubmit}>\n        &#x3C;input type=\"submit\" value=\"Submit\" />\n      &#x3C;/form>\n      &#x3C;textarea value={value} onChange={handleChange} />\n    &#x3C;/div>\n  );\n};\n\n</code></pre>\n<p>stateはuseStateを代入する。かっこのなかは初期値。\n[]で囲み一つ目の変数がゲッター、二つ目の変数がセッターとして扱われる。（両方とも関数）</p>\n<p>詳細を記述していないが、propsは型を指定する必要がある。\n関数コンポーネントの引数として渡し、中でそのまま扱うことができる。</p>\n<p>メソッドは関数として定義する必要がある。従って関数のありかたは一般的なクロージャと同等である。</p>\n<p>handleChange関数は引き数のかたにanyを指定しているが、ここで型を指定する場合は、handleSubmitのように__Event&#x3C;>の形式で型を指定する必要がある。\nonChange、onSubmitなどの呼び出すメソッドによって型を変える必要がある。</p>\n<p>returnでReact.Element型の値を返す必要がある。</p>\n","title":"ReactのTypeScriptを用いた関数コンポーネントの簡単なまとめ","date":"2022-9-12","tag":"programming"}},"__N_SSG":true}